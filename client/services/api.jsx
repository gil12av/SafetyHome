import axios from "axios";
import AsyncStorage from '@react-native-async-storage/async-storage';

export const API_URL = "http://192.168.31.68:5001/api";

// ◊ô◊¶◊ô◊®◊™ ◊ê◊ô◊†◊°◊ò◊†◊° ◊©◊ú axios ◊¢◊ù ◊î◊í◊ì◊®◊ï◊™ ◊ë◊®◊ô◊®◊™ ◊û◊ó◊ì◊ú
const axiosInstance = axios.create({
  baseURL: API_URL,
  withCredentials: true, // ◊ó◊©◊ï◊ë ◊õ◊ì◊ô ◊ú◊©◊û◊ï◊® ◊ï◊ú◊©◊ú◊ï◊ó Cookies
  headers: {
    "Content-Type": "application/json",
    "Accept": "application/json",
  },
});

// ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ú◊†◊ô◊î◊ï◊ú ◊©◊í◊ô◊ê◊ï◊™ ◊ë◊¶◊ï◊®◊î ◊ê◊ó◊ô◊ì◊î
const handleError = (error, action) => {
  console.error(`‚ùå Error during ${action}:`, error.response?.data || error.message);
  throw error;
};

// ◊î◊®◊©◊û◊™ ◊û◊©◊™◊û◊©
export const registerUser = async (userData) => {
  try {
    console.log("üì§ Sending Register Request:", userData);
    const response = await axiosInstance.post("/users/register", userData);
    console.log("üì• Server Response:", response.data);
    return response.data;
  } catch (error) {
    handleError(error, "registration");
  }
};

// ◊î◊™◊ó◊ë◊®◊ï◊™ ◊û◊©◊™◊û◊© ◊ï◊©◊û◊ô◊®◊™ ◊°◊©◊ü
export const loginUser = async (credentials) => {
  try {
    console.log("üì§ Sending Login Request:", credentials);
    const response = await axiosInstance.post("/users/login", credentials);
    console.log("üì• API Response at Client (Login):", response.data);

    const { user } = response.data;
    if (!user) {
      throw new Error("User data missing in server response.");
    }
    console.log("‚úÖ Login successful. User:", user);
    return user;
  } catch (error) {
    handleError(error, "login");
  }
};

// ◊ë◊ì◊ô◊ß◊™ ◊°◊ò◊ò◊ï◊° ◊î◊û◊©◊™◊û◊© (◊î◊ê◊ù ◊û◊ó◊ï◊ë◊®)
export const checkAuthStatus = async () => {
  try {
    console.log("üîç Checking user session...");
    const response = await axiosInstance.get("/users/me");
    console.log("‚úÖ Auth Check Response:", response.data);
    return response.data;
  } catch (error) {
    console.warn("üö´ User not authenticated.");
    return null;
  }
};

// ◊î◊™◊†◊™◊ß◊ï◊™
export const logoutUser = async () => {
  try {
    console.log("üì§ Sending Logout Request...");
    await axiosInstance.post("/users/logout");
    console.log("üö™ Logged out successfully.");
  } catch (error) {
    handleError(error, "logout");
  }
};

// ◊ò◊®◊ô◊í◊® ◊ú◊°◊®◊ô◊ß◊™ ◊®◊©◊™ ◊û◊î◊ô◊®◊î
export const triggerScan = async () => {
  try {
    console.log("üì° Initiating scan (via session)");
    const response = await axiosInstance.post("/scan-network"); 
    console.log("üì° Scan response:", response.data);
    return response.data;
  } catch (error) {
    handleError(error, "network scan");
  }
};

// ◊ò◊®◊ô◊í◊® ◊ú◊°◊®◊ô◊ß◊î ◊¢◊û◊ï◊ß◊î ◊©◊ú ◊î◊®◊©◊™
export const triggerDeepScan = async () => {
  try {
    console.log("üì° Initiating deep scan (via session)");
    const response = await axiosInstance.post("/deep-scan");  
    console.log("üì° Deep Scan response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå Error during deep network scan:", error.response?.data || error.message);
    throw error;
  }
};

// ◊©◊ú◊ô◊§◊™ ◊î◊ô◊°◊ò◊ï◊®◊ô◊ô◊™ ◊°◊®◊ô◊ß◊ï◊™
export const fetchScanHistory = async () => {
  try {
    console.log("üîç Fetching scan history...");
    const response = await axiosInstance.get("/scans");
    console.log("üìú Scan history received:", response.data);
    return response.data;
  } catch (error) {
    handleError(error, "fetching scan history");
  }  
};

// ◊¢◊ë◊ï◊® ◊ë◊ì◊ô◊ß◊™ CVE:
export const fetchCVEsForDevice = async (keyword) => {
  try {
    const response = await axios.get(`${API_URL}/cve/${keyword}`);
    console.log("üõ°Ô∏è CVEs for device:", response.data.length);
    return response.data;
  } catch (error) {
    console.error("‚ùå Failed to fetch CVEs:", error.message);
    return [];
  }
};

// ◊©◊û◊ô◊®◊™ ◊§◊í◊ô◊¢◊ï◊ô◊ï◊™ ◊ë◊ë◊°◊ô◊° ◊î◊†◊™◊ï◊†◊ô◊ù
export const saveSecurityAlerts = async (alerts) => {
  try {
    const response = await axios.post(`${API_URL}/alerts`, alerts, {
      withCredentials: true,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Failed to save alerts:", error.message);
  }
};


